/** 
 * This file was generated by 'vite-plugin-kit-routes'
 * 
 *      >> DO NOT EDIT THIS FILE MANUALLY <<
 */

export const PAGES = {
  "_ROOT": (sp?: Record<string, string | number>) =>  { return ensurePrefix(`/${appendSp(sp)}`) },
  "situations_situationName": (params: {situationName: number | string}, sp?: Record<string, string | number>) =>  { return `/situations/${params.situationName}${appendSp(sp)}` },
  "situations_situationName_situationStep": (params: {situationName: number | string, situationStep: number | string}, sp?: Record<string, string | number>) =>  { return `/situations/${params.situationName}/${params.situationStep}${appendSp(sp)}` }
}

export const SERVERS = {
  
}

export const ACTIONS = {
  
}

const appendSp = (sp?: Record<string, string | number | undefined>) => {
  if (sp === undefined) return ''
  const mapping = Object.entries(sp)
    .filter(c => c[1] !== undefined)
    .map(c => [c[0], String(c[1])])

  const formated = new URLSearchParams(mapping).toString()
  if (formated) {
    return `?${formated}`
  }
  return ''
}

const ensurePrefix = (str: string) => {
  if (str.startsWith('/')) {
    return str
  }
  return `/${str}`
}


/**
 * Add this type as a generic of the vite plugin `kitRoutes<ROUTES>`.
 * 
 * Full example:
 * ```ts
 * import type { ROUTES } from './ROUTES'
 * import { kitRoutes } from 'vite-plugin-kit-routes'
 * 
 * kitRoutes<ROUTES>({
 *  extend: {
 *    PAGES: {
 *      // here, "paths" it will be typed!
 *    }
 *  }
 * })
 * ```
 */
export type ROUTES = { 
  PAGES: { '_ROOT': never, 'situations_situationName': 'situationName', 'situations_situationName_situationStep': 'situationName' | 'situationStep' }
  SERVERS: {  }
  ACTIONS: {  }
}
  